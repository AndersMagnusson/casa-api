// Code generated by go-swagger; DO NOT EDIT.

package alarms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"casa-api/models"
)

// ToggleAlarmCreatedCode is the HTTP code returned for type ToggleAlarmCreated
const ToggleAlarmCreatedCode int = 201

/*ToggleAlarmCreated Ok

swagger:response toggleAlarmCreated
*/
type ToggleAlarmCreated struct {
	/*Allow access control
	  Required: true
	  Default: "*"
	*/
	AccessControlAllowOrigin string `json:"Access-Control-Allow-Origin"`

	/*
	  In: Body
	*/
	Payload *models.ToggleAlarm `json:"body,omitempty"`
}

// NewToggleAlarmCreated creates ToggleAlarmCreated with default headers values
func NewToggleAlarmCreated() *ToggleAlarmCreated {
	return &ToggleAlarmCreated{
		AccessControlAllowOrigin: "*",
	}
}

// WithAccessControlAllowOrigin adds the accessControlAllowOrigin to the toggle alarm created response
func (o *ToggleAlarmCreated) WithAccessControlAllowOrigin(accessControlAllowOrigin string) *ToggleAlarmCreated {
	o.AccessControlAllowOrigin = accessControlAllowOrigin
	return o
}

// SetAccessControlAllowOrigin sets the accessControlAllowOrigin to the toggle alarm created response
func (o *ToggleAlarmCreated) SetAccessControlAllowOrigin(accessControlAllowOrigin string) {
	o.AccessControlAllowOrigin = accessControlAllowOrigin
}

// WithPayload adds the payload to the toggle alarm created response
func (o *ToggleAlarmCreated) WithPayload(payload *models.ToggleAlarm) *ToggleAlarmCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the toggle alarm created response
func (o *ToggleAlarmCreated) SetPayload(payload *models.ToggleAlarm) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ToggleAlarmCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Access-Control-Allow-Origin

	accessControlAllowOrigin := o.AccessControlAllowOrigin
	if accessControlAllowOrigin != "" {
		rw.Header().Set("Access-Control-Allow-Origin", accessControlAllowOrigin)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ToggleAlarmMethodNotAllowedCode is the HTTP code returned for type ToggleAlarmMethodNotAllowed
const ToggleAlarmMethodNotAllowedCode int = 405

/*ToggleAlarmMethodNotAllowed Invalid input

swagger:response toggleAlarmMethodNotAllowed
*/
type ToggleAlarmMethodNotAllowed struct {
}

// NewToggleAlarmMethodNotAllowed creates ToggleAlarmMethodNotAllowed with default headers values
func NewToggleAlarmMethodNotAllowed() *ToggleAlarmMethodNotAllowed {
	return &ToggleAlarmMethodNotAllowed{}
}

// WriteResponse to the client
func (o *ToggleAlarmMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
}

/*ToggleAlarmDefault error

swagger:response toggleAlarmDefault
*/
type ToggleAlarmDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewToggleAlarmDefault creates ToggleAlarmDefault with default headers values
func NewToggleAlarmDefault(code int) *ToggleAlarmDefault {
	if code <= 0 {
		code = 500
	}

	return &ToggleAlarmDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the toggle alarm default response
func (o *ToggleAlarmDefault) WithStatusCode(code int) *ToggleAlarmDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the toggle alarm default response
func (o *ToggleAlarmDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the toggle alarm default response
func (o *ToggleAlarmDefault) WithPayload(payload *models.Error) *ToggleAlarmDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the toggle alarm default response
func (o *ToggleAlarmDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ToggleAlarmDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
