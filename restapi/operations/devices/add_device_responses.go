// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"casa/src/server/models"
)

// AddDeviceOKCode is the HTTP code returned for type AddDeviceOK
const AddDeviceOKCode int = 200

/*AddDeviceOK ok

swagger:response addDeviceOK
*/
type AddDeviceOK struct {
}

// NewAddDeviceOK creates AddDeviceOK with default headers values
func NewAddDeviceOK() *AddDeviceOK {
	return &AddDeviceOK{}
}

// WriteResponse to the client
func (o *AddDeviceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*AddDeviceDefault error

swagger:response addDeviceDefault
*/
type AddDeviceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddDeviceDefault creates AddDeviceDefault with default headers values
func NewAddDeviceDefault(code int) *AddDeviceDefault {
	if code <= 0 {
		code = 500
	}

	return &AddDeviceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add device default response
func (o *AddDeviceDefault) WithStatusCode(code int) *AddDeviceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add device default response
func (o *AddDeviceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add device default response
func (o *AddDeviceDefault) WithPayload(payload *models.Error) *AddDeviceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add device default response
func (o *AddDeviceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddDeviceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
