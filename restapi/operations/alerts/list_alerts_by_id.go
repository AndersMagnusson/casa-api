// Code generated by go-swagger; DO NOT EDIT.

package alerts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListAlertsByIDHandlerFunc turns a function with the right signature into a list alerts by Id handler
type ListAlertsByIDHandlerFunc func(ListAlertsByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAlertsByIDHandlerFunc) Handle(params ListAlertsByIDParams) middleware.Responder {
	return fn(params)
}

// ListAlertsByIDHandler interface for that can handle valid list alerts by Id params
type ListAlertsByIDHandler interface {
	Handle(ListAlertsByIDParams) middleware.Responder
}

// NewListAlertsByID creates a new http.Handler for the list alerts by Id operation
func NewListAlertsByID(ctx *middleware.Context, handler ListAlertsByIDHandler) *ListAlertsByID {
	return &ListAlertsByID{Context: ctx, Handler: handler}
}

/*ListAlertsByID swagger:route GET /alarms/{alarmId}/alerts/{id} alerts listAlertsById

Get alerts for the specified id

*/
type ListAlertsByID struct {
	Context *middleware.Context
	Handler ListAlertsByIDHandler
}

func (o *ListAlertsByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAlertsByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
